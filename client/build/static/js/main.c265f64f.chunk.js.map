{"version":3,"sources":["components/card.js","pages/landing/landing.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","className","src","avatarurl","username","mmr","dotaplus","wins","loses","target","rel","href","profileurl","API","PLAYERS","Movie","useState","data","setdata","useEffect","forEach","element","axios","get","then","profiledata","winlossdata","tempdata","pre","catch","err","length","map","ele","profile","personaname","avatarfull","mmr_estimate","estimate","plus","win","lose","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c265f64f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nconst Card = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\" card profilecard\">\r\n      <div className=\"card-image\">\r\n        <img src={props.avatarurl} className=\"img-responsive\" />\r\n      </div>\r\n      <div className=\"card-header\">\r\n        <div className=\"card-title h5\">{props.username}</div>\r\n        <div className=\"card-subtitle \">Estimate MMR : {props.mmr}</div>\r\n        <div className=\"card-subtitle \">\r\n          DotaPlus {props.dotaplus ? \"ðŸŸ¢\" : \"ðŸ”´\"}\r\n        </div>\r\n        <div className=\"card-subtitle \">\r\n          Wins : {props.wins} Loses : {props.loses}{\" \"}\r\n        </div>\r\n        <div className=\"card-subtitle \">\r\n          Wins Losses : {props.wins - props.loses}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card-footer\">\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={props.profileurl} className=\"btn btn-primary\">\r\n          Profile\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n\r\n/*\r\nActors: \"Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page, Tom Hardy\"\r\nAwards: \"Won 4 Oscars. Another 152 wins & 217 nominations.\"\r\nBoxOffice: \"$292,568,851\"\r\nCountry: \"USA, UK\"\r\nDVD: \"07 Dec 2010\"\r\nDirector: \"Christopher Nolan\"\r\nGenre: \"Action, Adventure, Sci-Fi, Thriller\"\r\nLanguage: \"English, Japanese, French\"\r\nMetascore: \"74\"\r\nPlot: \"A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.\"\r\nPoster: \"https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\"\r\nProduction: \"Warner Bros. Pictures\"\r\nRated: \"PG-13\"\r\nRatings: (3) [{â€¦}, {â€¦}, {â€¦}]\r\nReleased: \"16 Jul 2010\"\r\nResponse: \"True\"\r\nRuntime: \"148 min\"\r\nTitle: \"Inception\"\r\nType: \"movie\"\r\nWebsite: \"N/A\"\r\nWriter: \"Christopher Nolan\"\r\nYear: \"2010\"\r\nimdbID: \"tt1375666\"\r\nimdbRating: \"8.8\"\r\nimdbVotes: \"1,934,808\"\r\n*/\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./landing.css\";\r\nimport Card from \"../../components/card\";\r\nimport axios from \"axios\";\r\n\r\nconst API = \"https://api.opendota.com/api\";\r\nconst PLAYERS = [\r\n  \"264853364\",\r\n  \"167596568\",\r\n  \"326010968\",\r\n  \"140732052\",\r\n  \"188126754\",\r\n];\r\n\r\nconst Movie = (props) => {\r\n  const [data, setdata] = useState([]);\r\n\r\n  useEffect(() => {\r\n    PLAYERS.forEach((element) => {\r\n      axios\r\n        .get(`${API}/players/${element}`)\r\n        .then((profiledata) => {\r\n          axios\r\n            .get(`${API}/players/${element}/wl`)\r\n            .then((winlossdata) => {\r\n              // console.log(profiledata.data);\r\n              // console.log(winlossdata.data);\r\n\r\n              var tempdata = {\r\n                ...profiledata.data,\r\n                ...winlossdata.data,\r\n              };\r\n\r\n              console.log(tempdata);\r\n              setdata((pre) => {\r\n                return [...pre, tempdata];\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n      console.log(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"navbar\">\r\n        <section className=\"navbar-section\">\r\n          <a rel=\"noopener noreferrer\" href=\"#\" className=\"btn btn-link\">\r\n            {/* Docs */}\r\n          </a>\r\n          <a href=\"#\" className=\"btn btn-link\">\r\n            {/* Examples */}\r\n          </a>\r\n        </section>\r\n        <section className=\"navbar-center\">\r\n          <img src=\"https://img.icons8.com/color/48/000000/dota.png\" />\r\n        </section>\r\n        <section className=\"navbar-section\">\r\n          <a href=\"#\" className=\"btn btn-link\">\r\n            {/* Twitter */}\r\n          </a>\r\n          <a href=\"#\" className=\"btn btn-link\">\r\n            {/* GitHub */}\r\n          </a>\r\n        </section>\r\n      </header>\r\n      <div className=\" container\">\r\n        <div className=\"cardstack\">\r\n          {data.length &&\r\n            data.map((ele) => {\r\n              return (\r\n                <Card\r\n                  username={ele.profile.personaname}\r\n                  avatarurl={ele.profile.avatarfull}\r\n                  mmr={ele.mmr_estimate.estimate}\r\n                  profileurl={ele.profile.profileurl}\r\n                  dotaplus={ele.profile.plus}\r\n                  wins={ele.win}\r\n                  loses={ele.lose}\r\n                />\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// import { Listdemo } from \"./pages/demo\";\r\nimport Landing from \"./pages/landing/landing\";\r\n\r\n//Import CSS module\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Landing />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}